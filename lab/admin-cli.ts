#!/usr/bin/env tsx

// Admin CLI for managing templates via edge function API
// This tool reads DTO files generated by template-generator and saves them to the database
// via the validated edge function endpoints

import { Command } from 'commander';
import { readFile } from 'fs/promises';
import { resolve } from 'path';
import { config } from 'dotenv';
import type {
  TemplateDTOFile,
  ApiResponse,
  CreateTemplateResponse,
  CreateTemplateTreeResponse,
  isValidTemplateDTOFile,
} from './types/api-contracts';
import { isValidTemplateDTOFile as validateDTOFile } from './types/api-contracts';

// Load environment variables from project root
// When run from /lab directory via npm, go up one level to project root
config({ path: resolve(process.cwd(), '../.env') });

// Configuration
const SUPABASE_URL = process.env.SUPABASE_URL || 'http://127.0.0.1:54321';
const AUTH_TOKEN = process.env.SUPABASE_USER_TOKEN;

// Colors for output
const colors = {
  reset: '\x1b[0m',
  green: '\x1b[32m',
  yellow: '\x1b[33m',
  red: '\x1b[31m',
  blue: '\x1b[34m',
};

function log(color: keyof typeof colors, message: string) {
  console.log(`${colors[color]}${message}${colors.reset}`);
}

// Create CLI instance
const program = new Command();

program
  .name('admin-cli')
  .description('Admin CLI for managing Vemorize resources via edge function API')
  .version('0.1.0');

// Create course from template command
program
  .command('create-course')
  .description('Create a course from an existing template via edge function API')
  .argument('<templateId>', 'Template ID to create course from')
  .argument('<title>', 'Course title')
  .option('--description <text>', 'Course description (optional)')
  .option('--token <jwt>', 'JWT authentication token (overrides env var)')
  .action(async (templateId: string, title: string, options: { description?: string; token?: string }) => {
    try {
      console.log('');
      log('yellow', '======================================');
      log('yellow', 'Admin CLI - Create Course from Template');
      log('yellow', '======================================');
      console.log('');

      // Get authentication token
      const token = options.token || AUTH_TOKEN;
      if (!token) {
        log('red', '✗ No authentication token found');
        log('blue', 'Set SUPABASE_USER_TOKEN in .env or use --token flag');
        log('blue', 'Run: ./scripts/get-local-token.sh');
        process.exit(1);
      }

      log('blue', `Template ID: ${templateId}`);
      log('blue', `Course Title: ${title}`);
      if (options.description) log('blue', `Description: ${options.description}`);
      log('blue', `API URL: ${SUPABASE_URL}`);
      console.log('');

      // Create course from template
      log('yellow', 'Step 1: Creating course via POST /courses?action=create-from-template...');

      const requestBody = {
        templateId,
        title,
        description: options.description
      };

      const courseResponse = await fetch(`${SUPABASE_URL}/functions/v1/courses?action=create-from-template`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(requestBody),
      });

      const courseResult: ApiResponse<any> = await courseResponse.json();

      if (!courseResponse.ok || !courseResult.success) {
        log('red', `✗ Failed to create course (HTTP ${courseResponse.status})`);
        console.log(JSON.stringify(courseResult, null, 2));
        process.exit(1);
      }

      if (!courseResult.data) {
        log('red', '✗ No course data in response');
        process.exit(1);
      }

      const createdCourseId = courseResult.data.id;
      log('green', `✓ Course created with ID: ${createdCourseId}`);
      console.log('');

      // Success summary
      log('green', '======================================');
      log('green', '✓ Course created successfully!');
      log('green', '======================================');
      console.log('');
      console.log('Summary:');
      console.log(`- Course ID: ${createdCourseId}`);
      console.log(`- Title: ${courseResult.data.title}`);
      console.log(`- Description: ${courseResult.data.description || '(none)'}`);
      console.log(`- Template ID: ${templateId}`);
      console.log('');

    } catch (error) {
      console.log('');
      log('red', '✗ Error:');
      if (error instanceof Error) {
        console.error(error.message);
      } else {
        console.error(error);
      }
      process.exit(1);
    }
  });

// Save template command
program
  .command('save-template')
  .description('Save a template DTO to database via edge function API')
  .argument('<file>', 'Path to template DTO JSON file')
  .option('--token <jwt>', 'JWT authentication token (overrides env var)')
  .action(async (file: string, options: { token?: string }) => {
    try {
      console.log('');
      log('yellow', '======================================');
      log('yellow', 'Admin CLI - Save Template');
      log('yellow', '======================================');
      console.log('');

      // Get authentication token
      const token = options.token || AUTH_TOKEN;
      if (!token) {
        log('red', '✗ No authentication token found');
        log('blue', 'Set SUPABASE_USER_TOKEN in .env or use --token flag');
        log('blue', 'Run: ./scripts/get-local-token.sh');
        process.exit(1);
      }

      log('blue', `File: ${file}`);
      log('blue', `API URL: ${SUPABASE_URL}`);
      console.log('');

      // Read and parse DTO file
      log('yellow', 'Step 1: Reading DTO file...');
      const filePath = resolve(process.cwd(), file);
      const fileContent = await readFile(filePath, 'utf-8');
      const dtoData: unknown = JSON.parse(fileContent);

      // Type validation with type guard
      if (!validateDTOFile(dtoData)) {
        log('red', '✗ Invalid DTO file format');
        log('blue', 'Expected format: { template: {...}, tree: {...} }');
        process.exit(1);
      }

      // Now dtoData is properly typed as TemplateDTOFile
      const typedDTO: TemplateDTOFile = dtoData;

      log('green', `✓ Read DTO: ${dtoData.template.title}`);
      console.log('');

      // Step 2: Create template
      log('yellow', 'Step 2: Creating template via POST /templates...');
      const templateResponse = await fetch(`${SUPABASE_URL}/functions/v1/templates`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(typedDTO.template),
      });

      const templateResult: ApiResponse<CreateTemplateResponse> = await templateResponse.json();

      if (!templateResponse.ok || !templateResult.success) {
        log('red', `✗ Failed to create template (HTTP ${templateResponse.status})`);
        console.log(JSON.stringify(templateResult, null, 2));
        process.exit(1);
      }

      if (!templateResult.data) {
        log('red', '✗ No template data in response');
        process.exit(1);
      }

      const createdTemplateId = templateResult.data.id;
      log('green', `✓ Template created with ID: ${createdTemplateId}`);
      console.log('');

      // Step 3: Create template tree
      log('yellow', 'Step 3: Creating template tree via POST /templates?action=create-tree...');

      // Use the server-returned template ID instead of client-generated one
      const treePayload = {
        ...typedDTO.tree,
        templateId: createdTemplateId
      };

      const treeResponse = await fetch(`${SUPABASE_URL}/functions/v1/templates?action=create-tree`, {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${token}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify(treePayload),
      });

      const treeResult: ApiResponse<CreateTemplateTreeResponse> = await treeResponse.json();

      if (!treeResponse.ok || !treeResult.success) {
        log('red', `✗ Failed to create template tree (HTTP ${treeResponse.status})`);
        console.log(JSON.stringify(treeResult, null, 2));
        log('yellow', '⚠ Template was created but tree failed. You may need to clean up manually.');
        process.exit(1);
      }

      log('green', '✓ Template tree created successfully');
      console.log('');

      // Success summary
      log('green', '======================================');
      log('green', '✓ Template saved successfully!');
      log('green', '======================================');
      console.log('');
      console.log('Summary:');
      console.log(`- Template ID: ${createdTemplateId}`);
      console.log(`- Title: ${typedDTO.template.title}`);
      console.log(`- Description: ${typedDTO.template.description || '(none)'}`);
      console.log('');

    } catch (error) {
      console.log('');
      log('red', '✗ Error:');
      if (error instanceof Error) {
        console.error(error.message);
      } else {
        console.error(error);
      }
      process.exit(1);
    }
  });

// Handle uncaught exceptions
process.on('uncaughtException', (error) => {
  console.log('');
  log('red', '✗ Uncaught exception:');
  console.error(error);
  process.exit(1);
});

process.on('unhandledRejection', (reason) => {
  console.log('');
  log('red', '✗ Unhandled rejection:');
  console.error(reason);
  process.exit(1);
});

// Parse and run
program.parse(process.argv);
